// Generated by gencpp from file custom_msg_week3/custom.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_WEEK3_MESSAGE_CUSTOM_H
#define CUSTOM_MSG_WEEK3_MESSAGE_CUSTOM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>

namespace custom_msg_week3
{
template <class ContainerAllocator>
struct custom_
{
  typedef custom_<ContainerAllocator> Type;

  custom_()
    : user_input()  {
    }
  custom_(const ContainerAllocator& _alloc)
    : user_input(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _user_input_type;
  _user_input_type user_input;





  typedef boost::shared_ptr< ::custom_msg_week3::custom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg_week3::custom_<ContainerAllocator> const> ConstPtr;

}; // struct custom_

typedef ::custom_msg_week3::custom_<std::allocator<void> > custom;

typedef boost::shared_ptr< ::custom_msg_week3::custom > customPtr;
typedef boost::shared_ptr< ::custom_msg_week3::custom const> customConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg_week3::custom_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg_week3::custom_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg_week3::custom_<ContainerAllocator1> & lhs, const ::custom_msg_week3::custom_<ContainerAllocator2> & rhs)
{
  return lhs.user_input == rhs.user_input;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg_week3::custom_<ContainerAllocator1> & lhs, const ::custom_msg_week3::custom_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg_week3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg_week3::custom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg_week3::custom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_week3::custom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_week3::custom_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_week3::custom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_week3::custom_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg_week3::custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3d8e52418e879f2a35002f345d5e6fb";
  }

  static const char* value(const ::custom_msg_week3::custom_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3d8e52418e879f2ULL;
  static const uint64_t static_value2 = 0xa35002f345d5e6fbULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg_week3::custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg_week3/custom";
  }

  static const char* value(const ::custom_msg_week3::custom_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg_week3::custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String user_input\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::custom_msg_week3::custom_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg_week3::custom_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.user_input);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct custom_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg_week3::custom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg_week3::custom_<ContainerAllocator>& v)
  {
    s << indent << "user_input: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.user_input);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_WEEK3_MESSAGE_CUSTOM_H
